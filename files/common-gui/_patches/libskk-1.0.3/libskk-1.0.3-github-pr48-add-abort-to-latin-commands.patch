From 7fdb3194d8fed5375bdf31a6d3913d03f51a8b2f Mon Sep 17 00:00:00 2001
From: YOSHIOKA Takuma <tashioka.256@gmail.com>
Date: Sun, 21 Jan 2018 02:16:15 +0900
Subject: [PATCH 1/3] Add `abort-to-latin` and `abort-to-latin-passthrough`
 command

This change and PR #47 (`Escape` keymap) enables us to use
"vi-cooperative" keymap.

`abort-to-latin` does "`abort`, then change to latin input mode".
If the state changes on abort or mode change, key event is consumed.

`abort-to-latin-passthrough` does "`abort`, then change to latin input
mode, and let key event pass-through when no input string is discarded".

"vi-cooperative" keymap will be achived by config such as the code below:

```json
{
  "include": [
    "default"
  ],
  "define": {
    "keymap": {
      "Escape": "abort-to-latin-passthrough",
    }
  }
}
```

`abort-to-latin-passthrough` does not consume the key event even if the
state changed.
So, when the user type "C-j Esc" under the config above, application
will receive "Esc" key event, in contrast to `abort-to-latin` command.
---
 libskk/state.vala  | 45 ++++++++++++++++++++++++++++++++++++---------
 rules/README.rules |  2 ++
 2 files changed, 38 insertions(+), 9 deletions(-)

diff --git a/libskk/state.vala b/libskk/state.vala
index 0a72f2c..acfc30d 100644
--- a/libskk/state.vala
+++ b/libskk/state.vala
@@ -423,15 +423,34 @@ namespace Skk {
         {
             var command = state.lookup_key (key);
             // check abort and commit event
-            if (command == "abort") {
-                bool retval;
+            if (command == "abort" ||
+                command == "abort-to-latin" ||
+                command == "abort-to-latin-passthrough") {
+                bool something_changed;
+                bool allow_passthrough;
                 if (state.rom_kana_converter.preedit.length > 0) {
-                    retval = true;
+                    something_changed = true;
                 } else {
-                    retval = state.recursive_edit_abort ();
+                    something_changed = state.recursive_edit_abort ();
                 }
+                allow_passthrough = !something_changed;
                 state.reset ();
-                return retval;
+                if (command == "abort") {
+                    return something_changed;
+                }
+                // change to latin mode
+                if (state.input_mode != InputMode.LATIN) {
+                    state.input_mode = InputMode.LATIN;
+                    // this change doesn't affect `should_passthrough`
+                    something_changed = true;
+                }
+                // if nothing changed by "abort-to-latin-passthrough" command,
+                // let key event pass through
+                if (command == "abort-to-latin-passthrough" &&
+                    allow_passthrough) {
+                    return false;
+                }
+                return something_changed;
             } else if (command == "commit" ||
                        command == "commit-unhandled") {
                 bool retval;
@@ -613,7 +632,9 @@ namespace Skk {
                                                   ref KeyEvent key)
         {
             var command = state.lookup_key (key);
-            if (command == "abort") {
+            if (command == "abort" ||
+                command == "abort-to-latin" ||
+                command == "abort-to-latin-passthrough") {
                 state.reset ();
                 return true;
             }
@@ -660,7 +681,9 @@ namespace Skk {
                                                   ref KeyEvent key)
         {
             var command = state.lookup_key (key);
-            if (command == "abort") {
+            if (command == "abort" ||
+                command == "abort-to-latin" ||
+                command == "abort-to-latin-passthrough") {
                 state.reset ();
                 return true;
             }
@@ -720,7 +743,9 @@ namespace Skk {
                                                   ref KeyEvent key)
         {
             var command = state.lookup_key (key);
-            if (command == "abort") {
+            if (command == "abort" ||
+                command == "abort-to-latin" ||
+                command == "abort-to-latin-passthrough") {
                 state.reset ();
                 return true;
             }
@@ -1000,7 +1025,9 @@ namespace Skk {
                 }
                 return true;
             }
-            else if (command == "abort") {
+            else if (command == "abort" ||
+                     command == "abort-to-latin" ||
+                     command == "abort-to-latin-passthrough") {
                 state.candidates.clear ();
                 state.cancel_okuri ();
                 state.handler_type = typeof (StartStateHandler);
diff --git a/rules/README.rules b/rules/README.rules
index 5fb273f..ef05463 100644
--- a/rules/README.rules
+++ b/rules/README.rules
@@ -103,6 +103,8 @@ The current available commands are:
 
 abbrev
 abort
+abort-to-latin
+abort-to-latin-passthrough
 commit
 commit-unhandled
 complete

From b3c192168139f2907a4b1dd264bae8d4aba22208 Mon Sep 17 00:00:00 2001
From: YOSHIOKA Takuma <tashioka.256@gmail.com>
Date: Tue, 23 Jan 2018 00:21:03 +0900
Subject: [PATCH 2/3] Rename `*-passthrough` to `*-unhandled` and change
 variable name

  * Renamed `abort-to-latin-passthrough` command to
    `abort-to-latin-unhandled`
  * Renamed a variable `allow_passthrough` to `event_handled`.
    Note that they use inverse values to represent states,
    i.e. "event is handled" means "passthrough is *NOT* allowed",
    and vice versa.

See <https://github.com/ueno/libskk/pull/48#discussion_r162960592>.
---
 libskk/state.vala  | 23 ++++++++++++-----------
 rules/README.rules |  2 +-
 2 files changed, 13 insertions(+), 12 deletions(-)

diff --git a/libskk/state.vala b/libskk/state.vala
index acfc30d..a9f3df1 100644
--- a/libskk/state.vala
+++ b/libskk/state.vala
@@ -425,15 +425,15 @@ namespace Skk {
             // check abort and commit event
             if (command == "abort" ||
                 command == "abort-to-latin" ||
-                command == "abort-to-latin-passthrough") {
+                command == "abort-to-latin-unhandled") {
                 bool something_changed;
-                bool allow_passthrough;
+                bool event_handled;
                 if (state.rom_kana_converter.preedit.length > 0) {
                     something_changed = true;
                 } else {
                     something_changed = state.recursive_edit_abort ();
                 }
-                allow_passthrough = !something_changed;
+                event_handled = something_changed;
                 state.reset ();
                 if (command == "abort") {
                     return something_changed;
@@ -441,13 +441,14 @@ namespace Skk {
                 // change to latin mode
                 if (state.input_mode != InputMode.LATIN) {
                     state.input_mode = InputMode.LATIN;
-                    // this change doesn't affect `should_passthrough`
+                    // this change doesn't affect `event_handled`
                     something_changed = true;
                 }
-                // if nothing changed by "abort-to-latin-passthrough" command,
+                // if the key event will not be handled by
+                // "abort-to-latin-unhandled" command,
                 // let key event pass through
-                if (command == "abort-to-latin-passthrough" &&
-                    allow_passthrough) {
+                if (command == "abort-to-latin-unhandled" &&
+                    !event_handled) {
                     return false;
                 }
                 return something_changed;
@@ -634,7 +635,7 @@ namespace Skk {
             var command = state.lookup_key (key);
             if (command == "abort" ||
                 command == "abort-to-latin" ||
-                command == "abort-to-latin-passthrough") {
+                command == "abort-to-latin-unhandled") {
                 state.reset ();
                 return true;
             }
@@ -683,7 +684,7 @@ namespace Skk {
             var command = state.lookup_key (key);
             if (command == "abort" ||
                 command == "abort-to-latin" ||
-                command == "abort-to-latin-passthrough") {
+                command == "abort-to-latin-unhandled") {
                 state.reset ();
                 return true;
             }
@@ -745,7 +746,7 @@ namespace Skk {
             var command = state.lookup_key (key);
             if (command == "abort" ||
                 command == "abort-to-latin" ||
-                command == "abort-to-latin-passthrough") {
+                command == "abort-to-latin-unhandled") {
                 state.reset ();
                 return true;
             }
@@ -1027,7 +1028,7 @@ namespace Skk {
             }
             else if (command == "abort" ||
                      command == "abort-to-latin" ||
-                     command == "abort-to-latin-passthrough") {
+                     command == "abort-to-latin-unhandled") {
                 state.candidates.clear ();
                 state.cancel_okuri ();
                 state.handler_type = typeof (StartStateHandler);
diff --git a/rules/README.rules b/rules/README.rules
index ef05463..173f5d3 100644
--- a/rules/README.rules
+++ b/rules/README.rules
@@ -104,7 +104,7 @@ The current available commands are:
 abbrev
 abort
 abort-to-latin
-abort-to-latin-passthrough
+abort-to-latin-unhandled
 commit
 commit-unhandled
 complete
